// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_gene_expression_level
List get_gene_expression_level(NumericVector counts, NumericVector cell_size, double vmin, double vmax, int numbin, double a, double b);
RcppExport SEXP _SanityR_get_gene_expression_level(SEXP countsSEXP, SEXP cell_sizeSEXP, SEXP vminSEXP, SEXP vmaxSEXP, SEXP numbinSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cell_size(cell_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type vmin(vminSEXP);
    Rcpp::traits::input_parameter< double >::type vmax(vmaxSEXP);
    Rcpp::traits::input_parameter< int >::type numbin(numbinSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gene_expression_level(counts, cell_size, vmin, vmax, numbin, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SanityR_get_gene_expression_level", (DL_FUNC) &_SanityR_get_gene_expression_level, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_SanityR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
